<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>APUE on 指北针</title>
        <link>https://kris0923.github.io/tags/apue/</link>
        <description>Recent content in APUE on 指北针</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 16 Jun 2022 22:56:26 +0800</lastBuildDate><atom:link href="https://kris0923.github.io/tags/apue/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>【APUE】高级IO</title>
        <link>https://kris0923.github.io/p/apue%E9%AB%98%E7%BA%A7io/</link>
        <pubDate>Thu, 16 Jun 2022 22:56:26 +0800</pubDate>
        
        <guid>https://kris0923.github.io/p/apue%E9%AB%98%E7%BA%A7io/</guid>
        <description>&lt;h1 id=&#34;非-阻塞io&#34;&gt;非 阻塞IO&lt;/h1&gt;
&lt;p&gt;系统调用分为两类：“低速”系统调用和其他，低速系统调用可能会使进程永远阻塞：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果某些文件类型（读管道、终端设备、网络设备）的数据不存在，则读操作可能会使调用者永远阻塞&lt;/li&gt;
&lt;li&gt;如果数据不能被相同的文件类型立即接受（管道中无空间、网络流控制），写操作可能会使调用者永远阻塞&lt;/li&gt;
&lt;li&gt;在某种条件发生之前打开某种文件类型可能会发生阻塞（如 要打开一个终端设备，需要等待与之连接的调制解调器应答）&lt;/li&gt;
&lt;li&gt;对已经加上强制性 记录锁的文件进行读写&lt;/li&gt;
&lt;li&gt;某些ioctl操作&lt;/li&gt;
&lt;li&gt;某些进程间通信函数&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;不能讲与磁盘I/O有关的操作视为低速系统调用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;记录锁&#34;&gt;记录锁&lt;/h1&gt;
&lt;p&gt;功能： 当第一个进程正在读或修改这个文件的某个部分时，使用记录锁可以阻止其他进程修改同一文件区&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flock： 只能对整个文件加锁&lt;/li&gt;
&lt;li&gt;fcntl：支持记录锁功能&lt;/li&gt;
&lt;li&gt;lockf： 基于fcntl提供了一个简化的接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;记录锁的自动继承和释放&#34;&gt;记录锁的自动继承和释放&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;锁与进程和文件两者相关联：1）当一个进程终止时，它所建立的锁全部释放；2）无论一个描述符何时关闭，该进程通过这一描述符引用的文件上的任何一把锁都会释放&lt;/li&gt;
&lt;li&gt;由fork产生的子进程不继承父进程设置的锁&lt;/li&gt;
&lt;li&gt;在执行exec后新程序可以继承原执行程序的锁，但是如果对一个文件描述符设置了执行时关闭标志，那么当作为exec的一部分关闭该文件描述符时，将释放相应文件的所有锁&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;io多路转接&#34;&gt;I/O多路转接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;select&lt;/li&gt;
&lt;li&gt;pselect&lt;/li&gt;
&lt;li&gt;pool&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;异步io&#34;&gt;异步I/O&lt;/h1&gt;
&lt;h1 id=&#34;存储映射io&#34;&gt;存储映射I/O&lt;/h1&gt;
&lt;p&gt;将磁盘文件映射到存储空间的一个缓冲区上，从缓冲区中读数据就相当于是读文件中的相应字节&lt;/p&gt;
&lt;h2 id=&#34;实现-mmap-函数&#34;&gt;实现 mmap 函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;映射文件的 起始偏移量必须是系统虚拟存储页长度的整数倍，&lt;/li&gt;
&lt;li&gt;mmap不能将数据添加到文件中，必须要先加长该文件&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>【APUE】标准IO库</title>
        <link>https://kris0923.github.io/p/apue%E6%A0%87%E5%87%86io%E5%BA%93/</link>
        <pubDate>Thu, 09 Jun 2022 09:37:03 +0800</pubDate>
        
        <guid>https://kris0923.github.io/p/apue%E6%A0%87%E5%87%86io%E5%BA%93/</guid>
        <description>&lt;h1 id=&#34;1-缓冲缓冲的目的是尽可能的减少read或write的次数&#34;&gt;1. 缓冲：缓冲的目的是尽可能的减少read或write的次数&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;全缓冲：填满缓冲区后才尽心实际IO操作&lt;/li&gt;
&lt;li&gt;行缓冲：输入和输出遇到换行符的时候，执行IO操作，通常在流涉及终端的时候使用（标准输入和标准输出），在缓冲区满的时候，即使没有换行符，也进行IO操作&lt;/li&gt;
&lt;li&gt;不带缓冲：立即输出，标准错误流stderr通常是不带缓冲的&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-ios-c标准&#34;&gt;2. IOS C标准：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;当且仅当标准输出和标准输入不指向交互式设备时，才能是全缓冲&lt;/li&gt;
&lt;li&gt;标准错误绝不会是全缓冲&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-打开流&#34;&gt;3. 打开流&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Unix环境中使用b作为type的一部分[fopen(file, rb) OR freopen(file, ab+)]实际上没有作用，因为Unix内核并不区分文本文件和二进制文件&lt;/li&gt;
&lt;li&gt;进程正常终止（exit或者从main return）所有未带写缓冲数据的标准IO流都将被冲洗（放弃）&lt;/li&gt;
&lt;li&gt;getc和fgetc的区别在于，getc可以被实现为宏：&lt;/li&gt;
&lt;li&gt;getc的参数不能是有副作用的表达式&lt;/li&gt;
&lt;li&gt;fgetc一定是个函数，一定可以得到地址，可以作为参数传递&lt;/li&gt;
&lt;li&gt;fgetc的调用时间可能比getc长（函数调用的时间通常长于宏）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-二进制流ß&#34;&gt;4. 二进制流ß&lt;/h1&gt;
&lt;p&gt;fread和fwrite 可以一次读写一个完整的结构，但是只能用于同一个系统上读写数据，这是因为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在不同的系统中可能因为系统和编译程序的不同而导致结构成员偏移量的不同&lt;/li&gt;
&lt;li&gt;用来存储多字节正数和浮点数的结构在不同的系统上也可能不同&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>【APUE】守护进程</title>
        <link>https://kris0923.github.io/p/apue%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/</link>
        <pubDate>Wed, 08 Jun 2022 00:14:23 +0800</pubDate>
        
        <guid>https://kris0923.github.io/p/apue%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/</guid>
        <description>&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;守护进程（daemon）是生存期长的一种进程。通常在系统引导装入时启动&lt;/p&gt;
&lt;h2 id=&#34;举例&#34;&gt;举例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;kswapd 守护进程称为内存换页守护进程，支持虚拟内存在子系统在经过一段时间后讲脏页面写回磁盘来回收这些页面&lt;/li&gt;
&lt;li&gt;flush 守护进程在可用内存达到设置的最小阈值时讲脏页面冲洗至磁盘；也定期的将脏页面数据冲洗回磁盘来减少在系统出现故障时发生数据丢失。多个冲洗守护进程可以同时存在，每个写回设备都有一个冲洗守护进程&lt;/li&gt;
&lt;li&gt;sync_supers 守护进程定期的将文件系统元数据冲洗至磁盘&lt;/li&gt;
&lt;li&gt;jbd 守护进程帮助 实现了ext4文件系统中的日志功能&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;用户层守护进程的父进程时init进程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;编程规则&#34;&gt;编程规则&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;调用umask 将文件创建模式屏蔽字设置为一个已知值（通常是0）&lt;/li&gt;
&lt;li&gt;调用fork，然后使父进程 exit&lt;/li&gt;
&lt;li&gt;调用setsid创建一个新会话&lt;/li&gt;
&lt;li&gt;将工作目录改为根目录&lt;/li&gt;
&lt;li&gt;关闭不再需要的文件描述符&lt;/li&gt;
&lt;li&gt;某些守护进程打开/dev/null使其具有文件描述符0、1、2，这样任何一个试图读标准输入，写标准输出和错误输出的库例程都不会产生任何效果&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;出错记录&#34;&gt;出错记录&lt;/h2&gt;
&lt;p&gt;守护进程没有控制终端，所以不能简单的将消息写到标准错误上，大多数守护进程都使用syslog；&lt;/p&gt;
&lt;p&gt;有3种生产日志消息的方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内核进程可以调用log函数，任何用户都可以打开并读取/dev/klog设备来读取这些信息&lt;/li&gt;
&lt;li&gt;大多数用户进程（守护进程）调用syslog函数生产日志消息，这些消息发送至Unix域数据报套接字/dav/log&lt;/li&gt;
&lt;li&gt;无论一个用户是否再此主机上，还是在通过 TCP/IP网络连接到此主机的其他主机上，都可将消息像UDP端口514&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;单实例守护进程&#34;&gt;单实例守护进程&lt;/h2&gt;
&lt;p&gt;文件和记录锁机制，在运行程序前，先对文件进行加锁（将进程id写到文件）&lt;/p&gt;
&lt;h2 id=&#34;惯例&#34;&gt;惯例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;若守护进程是用锁文件，那么该文件通常存储在/var/run目录中&lt;/li&gt;
&lt;li&gt;若守护进程支持配置选项，那么配置文件通常存放在/etc目录中，名称通常是&lt;strong&gt;name&lt;/strong&gt;.conf&lt;/li&gt;
&lt;li&gt;守护进程可用命令行启动，但他们通常是又系统初始化脚本之一（/etc/rc&lt;em&gt;或者/etc/init.d/&lt;/em&gt;）启动的&lt;/li&gt;
&lt;li&gt;若一个进程支持配置文件，进程启动时读该文件，但启动之后就不在读该文件；为了避免修改配置后需要重启进程，某些守护进程将捕捉SIGHUP信号，当接收到该信号时重新读配置文件&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>【APUE】线程控制</title>
        <link>https://kris0923.github.io/p/apue%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
        <pubDate>Thu, 12 May 2022 22:16:13 +0800</pubDate>
        
        <guid>https://kris0923.github.io/p/apue%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
        <description>&lt;p&gt;在UNIX系统中，线程提供了分解并发任务的另一种模型&lt;/p&gt;
&lt;h2 id=&#34;线程终止&#34;&gt;线程终止&lt;/h2&gt;
&lt;p&gt;单个线程可以通过3种方式退出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单的从单个启动例程中返回，返回值是线程的退出码&lt;/li&gt;
&lt;li&gt;线程可以被同一进程中的其他线程取消 int pthread_cancel(pthread_t tid)&lt;/li&gt;
&lt;li&gt;线程调用pthread_exit
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#include &amp;lt;pthread.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;void pthread_exit(void *rval_ptr);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;void pthread_join(pthread_t thread, void **rval_ptr)  // 访问线程返回的指针
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;分配在栈上的变量作为pthread_exit的参数时，其他线程在使用该变量的时候栈上的内容可能已经被更改或撤销，导致程序报错或者访问到错误的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线程同步&#34;&gt;线程同步&lt;/h2&gt;
&lt;p&gt;为了保证每个线程看到一致的数据视图，需要使用&lt;strong&gt;互斥量&lt;/strong&gt;来保证同一时间只有一个线程访问数据&lt;/p&gt;
&lt;p&gt;当一个以上的线程需要访问动态分配的对象时，可以在对象中嵌入&lt;strong&gt;引用计数&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;避免死锁&#34;&gt;避免死锁&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使所有的线程都以相同的顺序加锁&lt;/li&gt;
&lt;li&gt;当程序结构复杂时，对互斥量排序比较困难，就需要先释放占有的锁，过一段时间再试&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;读写锁&#34;&gt;读写锁&lt;/h3&gt;
&lt;h4 id=&#34;三种状态&#34;&gt;三种状态&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;读模式加锁；写模式加锁；不加锁&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;当读写锁时写加锁状态时，所有试图对这个锁加锁的线程都会被阻塞；当读模式加锁状态时，所有读模式加锁都可以得到访问权，但是写模式加锁的线程都会阻塞；当有线程试图进行写模式加锁时，之后所有的读模式加锁都会被阻塞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;自旋锁&#34;&gt;自旋锁&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在获取锁之前一直处于忙等阻塞的状态，适用于：锁被持有的时间短，线程不希望在重新调度上花费太多的成本；在非抢占式内核中非常有用，在用户程序中并不是非常有用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;屏障barrier&#34;&gt;屏障（barrier）&lt;/h3&gt;
&lt;p&gt;允许某个线程等待，直到所有的合作线程都到达某一点（所有等待的线程都完成工作），然乎从该点继续执行；&lt;/p&gt;
&lt;h2 id=&#34;线程控制&#34;&gt;线程控制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一个进程可以创建的最大线程数没有确定的限制，但并不是说没有限制；&lt;/li&gt;
&lt;li&gt;互斥量属性控制同一线程是否可以对一个互斥量多次加锁&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重入&#34;&gt;重入&lt;/h2&gt;
&lt;p&gt;在多任务环境中，一个函数可以在任何时刻中断它，转入OS调度下去执行另外一段代码，而返回控制时不会出现任何错误；&lt;/p&gt;
&lt;h4 id=&#34;线程安全&#34;&gt;线程安全&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如果要一个函数在同一时间点可以被多个线程安全的调用，称该函数是线程安全的&lt;/li&gt;
&lt;li&gt;如果一个函数对多个线程来说是可重入的，就说这个函数是线程安全的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线程特定数据线程私有数据&#34;&gt;线程特定数据（线程私有数据）&lt;/h2&gt;
&lt;p&gt;查询或存储某个特定线程相关数据的一种机制，，防止某个线程数据于其他线程数据混淆，提供了让基于进程的接口适应多线程环境的机制&lt;/p&gt;
&lt;h2 id=&#34;线程和信号&#34;&gt;线程和信号&lt;/h2&gt;
&lt;p&gt;一个进程中的信号处理是所有线程共享的&lt;/p&gt;
&lt;h2 id=&#34;线程和fork&#34;&gt;线程和fork&lt;/h2&gt;
&lt;p&gt;子进程和父进程都没有对内存内容作出改动时，子进程和父进程共享内存页的副本&lt;/p&gt;
&lt;h2 id=&#34;线程和io&#34;&gt;线程和I/O&lt;/h2&gt;
&lt;p&gt;进程中所有线程共享文件描述符，文件读取可以使用原子操作&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【APUE】Unix体系结构</title>
        <link>https://kris0923.github.io/p/apueunix%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</link>
        <pubDate>Thu, 28 Apr 2022 12:50:33 +0800</pubDate>
        
        <guid>https://kris0923.github.io/p/apueunix%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</guid>
        <description>&lt;p&gt;Unix系统结构从内到外 内核-&amp;gt;系统调用-&amp;gt;(公用函数库、shell)-&amp;gt;应用程序&lt;/p&gt;
&lt;p&gt;一般用户信息在/etc/passwd 文件中，但macOS 的passwd文件中只有单用户模式的用户信息，普通登陆用户信息又Open Directory提供&lt;/p&gt;
&lt;p&gt;fork 创建一个新进程，新进程是调用进程的一个副本，fork调用一次，返回两次，在父进程中返回子进程ID，在子进程中返回0&lt;/p&gt;
&lt;p&gt;Unix系统中有两种时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日历时间 （早期的成为格里尼治标准时间）&lt;/li&gt;
&lt;li&gt;进程时间（CPU时间）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;系统调用和库函数&#34;&gt;系统调用和库函数&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;系统调用：各版本Unix实现的提供良好定义、数量有限、直接进入内核的入口点，成为系统调用&lt;/li&gt;
&lt;li&gt;库函数：C语言实现的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;库函数可以替换，系统调用不能替换&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;用户进程&lt;/th&gt;
&lt;th&gt;内核&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;应用程序-&amp;gt;C库函数&lt;/td&gt;
&lt;td&gt;系统调用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;posix&#34;&gt;POSIX&lt;/h1&gt;
&lt;p&gt;POSIX标准定义了7类系统实现的限制和常量，一些常量限制在limits.h（mac /usr/include/limits.h）文件中，sysconf，pathconf，fpathconf可以在运行时得到实际实现值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与文件和路径有关 pathconf，fpathconf&lt;/li&gt;
&lt;li&gt;与文件和路径无关 sysconf&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
