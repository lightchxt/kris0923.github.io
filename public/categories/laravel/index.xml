<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>laravel on 地球是个球体，哪里来的什么东南西北。只是因为我们从自己立场去看，才有了方向，有了是非</title>
    <link>https://kris0923.github.io/categories/laravel/</link>
    <description>Recent content in laravel on 地球是个球体，哪里来的什么东南西北。只是因为我们从自己立场去看，才有了方向，有了是非</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 26 Sep 2019 21:05:04 +0800</lastBuildDate>
    
	<atom:link href="https://kris0923.github.io/categories/laravel/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Laravel中间件实现分析</title>
      <link>https://kris0923.github.io/post/laravel%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
      <pubDate>Thu, 26 Sep 2019 21:05:04 +0800</pubDate>
      
      <guid>https://kris0923.github.io/post/laravel%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid>
      <description>Laravel的中间件提供了一种方便的机制过滤进入应用程序的 HTTP 请求，并且Laravel自带了一些中间件包括身份验证、CSRF保护、COOKIE加密解密等，使用非常方便。那么Laravel中“中间件”是怎么实现的，为什么只需要简单修改几个配置就能试中间件生效，中间件的执行顺序又是怎样的呢。出于对这些问题的好奇，我阅读了一下Laravel中间件的实现相关源码。
\Illuminate\Pipeline\Pipeline - 实现中间件的核心类 在介绍Pipeline这个类之前，我们先简单浏览一下Laravel应用程序的生命周期。接下里我一步一步的说明如何实例化Pipeline方法的。
 在入口文件index.php只有几行代码
$app = require_once __DIR__.&#39;/../bootstrap/app.php&#39;; $kernel = $app-&amp;gt;make(Illuminate\Contracts\Http\Kernel::class); $response = $kernel-&amp;gt;handle( $request = Illuminate\Http\Request::capture() ); $response-&amp;gt;send(); $kernel-&amp;gt;terminate($request, $response);   首先实例化了一个Illuminate\Contracts\Http\Kernel，在bootstrap/app.php文件中， Illuminate\Contracts\Http\Kernel接口已经被绑定了App\Http\Kernel类，所以这里的$kernel是一个App\Http\Kernel的对象
bootstrap/app.php
// 此处对Illuminate\Contracts\Http\Kernel进行类绑定 $app-&amp;gt;singleton( Illuminate\Contracts\Http\Kernel::class, App\Http\Kernel::class ); $app-&amp;gt;singleton( Illuminate\Contracts\Console\Kernel::class, App\Console\Kernel::class ); $app-&amp;gt;singleton( Illuminate\Contracts\Debug\ExceptionHandler::class, App\Exceptions\Handler::class ); return $app;  然后接着往下看，调用了Kernel的handel方法，并传入了一个Request对象。
class Kernel implements KernelContract ... /** * Handle an incoming HTTP request. * * @param \Illuminate\Http\Request $request * @return \Illuminate\Http\Response */ public function handle($request) { try { $request-&amp;gt;enableHttpMethodParameterOverride(); $response = $this-&amp;gt;sendRequestThroughRouter($request); // sendRequestThroughRouter 方里面实例化了Pipeline } catch (Exception $e) { $this-&amp;gt;reportException($e); $response = $this-&amp;gt;renderException($request, $e); } catch (Throwable $e) { $this-&amp;gt;reportException($e = new FatalThrowableError($e)); $response = $this-&amp;gt;renderException($request, $e); } $this-&amp;gt;app[&#39;events&#39;]-&amp;gt;dispatch( new Events\RequestHandled($request, $response) ); return $response; } /** * Send the given request through the middleware / router.</description>
    </item>
    
    <item>
      <title>Laravel Facades 门面模式的实现</title>
      <link>https://kris0923.github.io/post/laravel-facades-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 17 Jul 2019 23:08:42 +0000</pubDate>
      
      <guid>https://kris0923.github.io/post/laravel-facades-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>以下是Laravel官方文档的介绍
 Facades 为应用程序的 服务容器 中可用的类提供了一个「静态」接口。Laravel 本身附带许多的 facades，甚至你可能在不知情的状况下已经在使用他们！Laravel 「facades」作为在服务容器内基类的「静态代理」，拥有简洁、易表达的语法优点，同时维持着比传统静态方法更高的可测试性和灵活性。
从介绍中可以看出，Facades 好处就是让代码更加简介，优雅，这也是Laravel追求的特性，如何使用Facades这里就不介绍了，可以参考Laravel文档(中文) ，本文介绍一下Facades是如何知道和创建你需要的类实例。
以 log Facade 为例，我们看下是如何通过log这个字符串找到 \Illuminate\Log\Writer 这个类的 先看 \Illuminate\Support\Facades\Log 门面
class Log extends Facade { /** * Get the registered name of the component. * * @return string */ protected static function getFacadeAccessor() { return &#39;log&#39;; } }  这个类非常简单，只有一个静态方法 getFacadeAccessor(), 返回了一个log字符串。 然后看Log的父类 Facade, Facede中有很多方法，这里关注其中两个：
abstract class Facade { /** * The application instance being facaded. * * @var \Illuminate\Contracts\Foundation\Application */ protected static $app; /** * The resolved object instances.</description>
    </item>
    
  </channel>
</rss>