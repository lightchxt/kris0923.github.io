<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>指北针</title><link>blog.ibird.site/</link><description>Recent content on 指北针</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 23 Jul 2022 00:15:23 +0800</lastBuildDate><atom:link href="blog.ibird.site/rss.xml" rel="self" type="application/rss+xml"/><item><title>GO语言类型转换</title><link>blog.ibird.site/post/golang/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link><pubDate>Sat, 23 Jul 2022 00:15:23 +0800</pubDate><guid>blog.ibird.site/post/golang/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid><description>基本数据类型 int 转string var i = 10 s := strconv.Itoa(i) fmt.Printf(&amp;#34;%v&amp;#34;, s) string 转int var s = &amp;#34;10&amp;#34; i, err := strconv.Atoi(s) if err != nil { fmt.Println(err) return } fmt.Printf(&amp;#34;%v&amp;#34;, i) // int64 ii, err := strconv.ParseInt(s, 10, 32) if err != nil { fmt.Println(err) return } fmt.Printf(&amp;#34;%v&amp;#34;, ii) // float64 f, err := strconv.ParseInt(s,</description></item><item><title>【APUE】高级IO</title><link>blog.ibird.site/post/apue/%E9%AB%98%E7%BA%A7io/</link><pubDate>Thu, 16 Jun 2022 22:56:26 +0800</pubDate><guid>blog.ibird.site/post/apue/%E9%AB%98%E7%BA%A7io/</guid><description>非 阻塞IO 系统调用分为两类：“低速”系统调用和其他，低速系统调用可能会使进程永远阻塞： 如果某些文件类型（读管道、终端设备、网络设备）的数据不</description></item><item><title>【APUE】标准IO库</title><link>blog.ibird.site/post/apue/standardio/</link><pubDate>Thu, 09 Jun 2022 09:37:03 +0800</pubDate><guid>blog.ibird.site/post/apue/standardio/</guid><description>1. 缓冲：缓冲的目的是尽可能的减少read或write的次数 全缓冲：填满缓冲区后才尽心实际IO操作 行缓冲：输入和输出遇到换行符的时候，执行IO</description></item><item><title>【APUE】守护进程</title><link>blog.ibird.site/post/apue/deamon/</link><pubDate>Wed, 08 Jun 2022 00:14:23 +0800</pubDate><guid>blog.ibird.site/post/apue/deamon/</guid><description>定义 守护进程（daemon）是生存期长的一种进程。通常在系统引导装入时启动 举例 kswapd 守护进程称为内存换页守护进程，支持虚拟内存在子系统在经过一段</description></item><item><title>【APUE】线程控制</title><link>blog.ibird.site/post/apue/thread/</link><pubDate>Thu, 12 May 2022 22:16:13 +0800</pubDate><guid>blog.ibird.site/post/apue/thread/</guid><description>在UNIX系统中，线程提供了分解并发任务的另一种模型 线程终止 单个线程可以通过3种方式退出： 简单的从单个启动例程中返回，返回值是线程的退出码 线</description></item><item><title>【APUE】Unix体系结构</title><link>blog.ibird.site/post/apue/architecture/</link><pubDate>Thu, 28 Apr 2022 12:50:33 +0800</pubDate><guid>blog.ibird.site/post/apue/architecture/</guid><description>Unix系统结构从内到外 内核-&amp;gt;系统调用-&amp;gt;(公用函数库、shell)-&amp;gt;应用程序 一般用户信息在/etc/passwd 文件</description></item><item><title>Redis数据过期策略</title><link>blog.ibird.site/post/redis/</link><pubDate>Tue, 29 Mar 2022 23:06:11 +0800</pubDate><guid>blog.ibird.site/post/redis/</guid><description>1. 数据类型 五种数据类型 2. Redis为什么这么快 Redis是基于内存的操作，CPU不是Redis的瓶颈，内存大小和网络带宽最有可能是Redis</description></item><item><title>一文了解MySql</title><link>blog.ibird.site/post/mysql/</link><pubDate>Wed, 08 Sep 2021 22:36:54 +0800</pubDate><guid>blog.ibird.site/post/mysql/</guid><description>MySlq 逻辑架构 {{ $image := .Resources.GetMatch &amp;ldquo;mysql.png&amp;rdquo; }} 为什么不要使用长事务： 长事务意味着系统里面存在着很老的事务视图，在事务提交之前这些回滚记录都必须保留，导致占用大量的存</description></item><item><title>计算广告</title><link>blog.ibird.site/post/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/</link><pubDate>Sat, 14 Dec 2019 22:50:45 +0000</pubDate><guid>blog.ibird.site/post/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/</guid><description>术语解释 DMP 数据管理平台 ADX 广告交易平台 SSP 供给方平台 DSP 需求方平台 计算广告系统架构 广告投放引擎的主要模块 广告投放机 广告检索 广告排序 收益管理 广告请求</description></item><item><title>Laravel中间件实现分析</title><link>blog.ibird.site/post/laravel%E4%B8%AD%E9%97%B4%E4%BB%B6/</link><pubDate>Thu, 26 Sep 2019 21:05:04 +0800</pubDate><guid>blog.ibird.site/post/laravel%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid><description>Laravel的中间件提供了一种方便的机制过滤进入应用程序的 HTTP 请求，并且Laravel自带了一些中间件包括身份验证、CSRF保护、COOKI</description></item><item><title>Nginx介绍</title><link>blog.ibird.site/post/nginx%E4%BB%8B%E7%BB%8D/</link><pubDate>Sun, 01 Sep 2019 23:46:27 +0800</pubDate><guid>blog.ibird.site/post/nginx%E4%BB%8B%E7%BB%8D/</guid><description>Nginx是什么 nginx 是一个免费的，开源的，高性能HTTP服务器和反向代理，以及IMAP / POP3代理服务器。NGINX以其高性能，稳定性，丰富</description></item><item><title>MySql如何使用索引（二）</title><link>blog.ibird.site/post/mysql%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E4%BA%8C/</link><pubDate>Sun, 28 Jul 2019 21:11:18 +0800</pubDate><guid>blog.ibird.site/post/mysql%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E4%BA%8C/</guid><description>上篇 介绍了MySql什么时候会尝试使用索引，本文介绍一下我了解的不会使用索引的情况, 仍然使用上次建立好的表 1. where 子句中like 使用了前缀通配符</description></item><item><title>MySql如何使用索引（一）</title><link>blog.ibird.site/post/mysql%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E4%B8%80/</link><pubDate>Sun, 28 Jul 2019 21:10:51 +0800</pubDate><guid>blog.ibird.site/post/mysql%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E4%B8%80/</guid><description>我们都知道在 MySql 中使用索引可以提高查询效率,但有时候真正执行Sql查询的时候却没有按照我们的预想使用索引，而是全表扫描，导致有慢Sql影响了整</description></item><item><title>Linux命令之sed</title><link>blog.ibird.site/post/sed/</link><pubDate>Sun, 28 Jul 2019 21:09:34 +0800</pubDate><guid>blog.ibird.site/post/sed/</guid><description>sed 流处理编辑器 行处理一次只处理一行数据 （sed处理文件内容的核心思想） 不改变文件内容（除非重定向） 命令行格式 sed [option] 'command' file(s) 脚本格式 sed -f scriptfile file(s) sed 命令 p</description></item><item><title>Linux 命令之 Awk</title><link>blog.ibird.site/post/awk/</link><pubDate>Sun, 28 Jul 2019 21:08:44 +0800</pubDate><guid>blog.ibird.site/post/awk/</guid><description>awk 文本处理工具 可编程，功能强大 可以用来统计，制表等功能 处理方式 一次处理一行内容 可以对每行进行切片处理 格式 命令行格式 awk [options] &amp;#39;command&amp;#39; file(s) 脚本格式 awk -f script_file file(s) 内</description></item><item><title>设计模式之命令模式</title><link>blog.ibird.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</link><pubDate>Sat, 27 Jul 2019 13:29:24 +0800</pubDate><guid>blog.ibird.site/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</guid><description>定义 将“请求”封装成命令对象，以便使用不同的请求，队列或者日志来参数化其他对象。命令模式也支持可撤销的操做。 适用场景 当需要将发出请求的对象和</description></item><item><title>如何构建并发系统</title><link>blog.ibird.site/post/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F/</link><pubDate>Wed, 17 Jul 2019 23:10:51 +0000</pubDate><guid>blog.ibird.site/post/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F/</guid><description>本文简单说明几个设计并发系统时需要考虑的问题，内容摘抄自《GO语言并发之道》 异常传递 异常是什么，什么时候发生，提供了哪些好处 首先，异常需要传</description></item><item><title>MySql 修改表结构时 ALTER,MODIFY,CHANGE的区别</title><link>blog.ibird.site/post/mysql-%E4%BF%AE%E6%94%B9%E8%A1%A8%E7%BB%93%E6%9E%84%E6%97%B6-alter-modify-change%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Wed, 17 Jul 2019 23:09:55 +0000</pubDate><guid>blog.ibird.site/post/mysql-%E4%BF%AE%E6%94%B9%E8%A1%A8%E7%BB%93%E6%9E%84%E6%97%B6-alter-modify-change%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>根据MySql文档，我们知道在修改表内某一列的属性的时候，MySql支持3中语法结构： ALTER [ONLINE|OFFLINE] [IGNORE] TABLE tbl_name ALTER [COLUMN] col_name {SET DEFAULT literal | DROP DEFAULT} ALTER [ONLINE|OFFLINE] [IGNORE] TABLE tbl_name CHANGE [COLUMN] old_col_name new_col_name column_definition [FIRST|AFTER col_name] ALTER</description></item><item><title>Laravel Facades 门面模式的实现</title><link>blog.ibird.site/post/laravel-facades-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/</link><pubDate>Wed, 17 Jul 2019 23:08:42 +0000</pubDate><guid>blog.ibird.site/post/laravel-facades-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid><description>以下是Laravel官方文档的介绍 Facades 为应用程序的 服务容器 中可用的类提供了一个「静态」接口。Laravel 本身附带许多的 facades，甚至你</description></item><item><title>校验码</title><link>blog.ibird.site/post/%E6%A0%A1%E9%AA%8C%E7%A0%81/</link><pubDate>Wed, 17 Jul 2019 12:18:45 +0000</pubDate><guid>blog.ibird.site/post/%E6%A0%A1%E9%AA%8C%E7%A0%81/</guid><description>为了保证计算机系统运行时数据在传输过程中正确无误，提高硬件电路的可靠性和提高代码的校验能力,通常使用校验码来检测传输数据是否出错，常用的3种</description></item><item><title>PHP5与PHP7的zval比较</title><link>blog.ibird.site/post/php5%E4%B8%8Ephp7%E7%9A%84zval%E6%AF%94%E8%BE%83/</link><pubDate>Wed, 17 Jul 2019 12:16:53 +0000</pubDate><guid>blog.ibird.site/post/php5%E4%B8%8Ephp7%E7%9A%84zval%E6%AF%94%E8%BE%83/</guid><description>PHP5中zval定义 struct _zval struct { zvalue_value value; // 16 zend_unit refcount_gc; // 4字节 引用计数 zend_uchar type; // 1 zend_uchar is_ref__gc; // 1 是否为引用类型 } typedef union _avalue_value { long lval; // 8 double dval; // 8 struct { char *val; int len; } str; // 16 HashTable *ht; //</description></item><item><title>PHP 内核分析笔记（二）多进程与多线程SAPI生命周期</title><link>blog.ibird.site/post/php-%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0%E4%BA%8C/</link><pubDate>Thu, 20 Jun 2019 00:15:23 +0800</pubDate><guid>blog.ibird.site/post/php-%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid><description>多进程SAPI生命周期 以Apache为例，PHP编译为apache的一个模块来处理php请求，Apache启动后会fork多个进程，每个进程</description></item><item><title>PHP 内核分析笔记（一）单进程SAPI生命周期</title><link>blog.ibird.site/post/php-%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0%E4%B8%80/</link><pubDate>Wed, 19 Jun 2019 00:15:23 +0800</pubDate><guid>blog.ibird.site/post/php-%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0%E4%B8%80/</guid><description>http://www.php-internals.com/images/book/chapt02/02-00-php- 单进程SAPI生命周期 :start php -f test.php call each extension`s MINIT (模块初始化阶段，调用所有模块的MINIT函数) Request test.php call each extension`s RINIT (调用所有模块的RINIT函数) Execute test.php call each</description></item><item><title>PHP 知识总结（一）</title><link>blog.ibird.site/post/php-summarize/</link><pubDate>Sat, 08 Jun 2019 00:14:23 +0800</pubDate><guid>blog.ibird.site/post/php-summarize/</guid><description>语法基础 变量类型 boolean integet float # 判断是否是一个数值类型 bool is_nan(float $val) string // 字符串转数值 //如果 字符串中包含 &amp;#39;.&amp;#39;, &amp;#39;e&amp;#39;或者&amp;#39;E&amp;#39; 转</description></item><item><title>GO语言语法基础</title><link>blog.ibird.site/post/go-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link><pubDate>Mon, 17 Dec 2018 00:15:23 +0800</pubDate><guid>blog.ibird.site/post/go-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid><description>基础语法 i++, i&amp;ndash; 在go语言中是语句，而不像其他语言一样是表达式，所以， j = i++ 在go语言里面是不合法的,并且只支持后缀， &amp;ndash;i 是不合法的 for 是go里面唯</description></item></channel></rss>