<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>go on 指北针</title>
        <link>https://kris0923.github.io/tags/go/</link>
        <description>Recent content in go on 指北针</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 23 Jul 2022 00:15:23 +0800</lastBuildDate><atom:link href="https://kris0923.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>GO语言类型转换</title>
        <link>https://kris0923.github.io/p/go%E8%AF%AD%E8%A8%80%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
        <pubDate>Sat, 23 Jul 2022 00:15:23 +0800</pubDate>
        
        <guid>https://kris0923.github.io/p/go%E8%AF%AD%E8%A8%80%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
        <description>&lt;h1 id=&#34;基本数据类型&#34;&gt;基本数据类型&lt;/h1&gt;
&lt;h2 id=&#34;int-转string&#34;&gt;int 转string&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;var i = 10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;s := strconv.Itoa(i)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;fmt.Printf(&amp;#34;%v&amp;#34;, s)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;string-转int&#34;&gt;string 转int&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;var s = &amp;#34;10&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;i, err := strconv.Atoi(s)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;if err != nil {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	fmt.Println(err)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	return
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;fmt.Printf(&amp;#34;%v&amp;#34;, i)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// int64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ii, err := strconv.ParseInt(s, 10, 32)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;if err != nil {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	fmt.Println(err)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	return
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;fmt.Printf(&amp;#34;%v&amp;#34;, ii)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// float64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;f, err := strconv.ParseInt(s, 10)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;if err != nil {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	fmt.Println(err)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	return
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;fmt.Printf(&amp;#34;%v&amp;#34;, f)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>如何构建并发系统</title>
        <link>https://kris0923.github.io/p/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F/</link>
        <pubDate>Wed, 17 Jul 2019 23:10:51 +0000</pubDate>
        
        <guid>https://kris0923.github.io/p/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;本文简单说明几个设计并发系统时需要考虑的问题，内容摘抄自《GO语言并发之道》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;异常传递&#34;&gt;异常传递&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;异常是什么，什么时候发生，提供了哪些好处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先，异常需要传达几个关键信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发生了什么：
这部分异常信息包括了岁异常时间的描述。例如：磁盘已满，连接被重置，证书过期等&lt;/li&gt;
&lt;li&gt;发生在什么时间，什么位置：
异常应该包含完整的轨迹信息，从调用的启动方式开始，已异常的实例结尾。栈轨迹信息不应该被包含在异常信息中，但当需要处理栈中的异常时应该很容易被找到&lt;/li&gt;
&lt;li&gt;对用户友好的信息：应当对展现给用户的信息进行自定义，应该只包含前两点的概述以及相关信息。对用户友好的信息是从用户的角度出发，给出一些信息，说明这些信息是否是暂时的，并且最好是一行以内的文本&lt;/li&gt;
&lt;li&gt;告诉用户如何获取更多信息：某些情况下，用户希望知道当异常发生时具体发生了那些故障，展示给用户的异常信息应该提供一个id，利用这个id可以查到对应的详细日志，日志应该包含有完整的信息（异常的发生时间和异常时的堆栈调用）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当展示给用户的信息不包含这些信息，不是出错了就是有BUG。所以异常可以分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BUG&lt;/li&gt;
&lt;li&gt;已知信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;超时和取消&#34;&gt;超时和取消&lt;/h2&gt;
&lt;h3 id=&#34;为什么要支持超时&#34;&gt;为什么要支持超时？&lt;/h3&gt;
&lt;h4 id=&#34;系统饱和&#34;&gt;系统饱和&lt;/h4&gt;
&lt;p&gt;如果系统已经饱和（已经达到系统处理请求的能力），希望可以返回超时，而不是花很长的时间等待响应。&lt;/p&gt;
&lt;h4 id=&#34;陈旧的数据&#34;&gt;陈旧的数据&lt;/h4&gt;
&lt;p&gt;数据通常有一个窗口期，一般是在这个窗口中先处理更多相关数据或者处理数据的需求已经过期。
如果知道窗口期，那么将context.WithDeadline或context.WithTimeout创建的context传递给并发进程是有意义的，如果事先不知道窗口，我们希望并发进程的父节点能够在不再需要时取消并发进程。context.WithCancel是达到这个目的的最佳选择&lt;/p&gt;
&lt;h4 id=&#34;试图防止死锁&#34;&gt;试图防止死锁&lt;/h4&gt;
&lt;p&gt;通过设置超时可以将一个死锁系统转变为一个活锁系统，在系统死锁后，很可能会遇到时序配置不同步的情况。因此最好是在允许饿时间内修复活锁，好过发生死锁后只能通过重启系统才能恢复系统&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这不是如何正确构建系统的建议，而是如何建立一个对时间问题有容错能力的系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;什么时候应当设置超时&#34;&gt;什么时候应当设置超时&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;请求在超时时不太可能重复&lt;/li&gt;
&lt;li&gt;没有资源来存储请求&lt;/li&gt;
&lt;li&gt;对系统的响应或请求发送数据有时效性要求&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;并发进程可能被取消的原因&#34;&gt;并发进程可能被取消的原因&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;超时-隐式取消&lt;/li&gt;
&lt;li&gt;用户干预&lt;/li&gt;
&lt;li&gt;父进程取消：如果父进程停止，那子进程也将被取消&lt;/li&gt;
&lt;li&gt;复制请求：将数据发送给多个并发进程，以尝试从其中一个系统获得更快的响应。当第一个响应回来的时候，取消其余的进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;心跳&#34;&gt;心跳&lt;/h2&gt;
&lt;p&gt;心跳是并发进程向外界发出信号的一种方式。&lt;/p&gt;
&lt;h3 id=&#34;心跳类型&#34;&gt;心跳类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在一段时间间隔内发出的心跳&lt;/li&gt;
&lt;li&gt;在工作单元开始时发出的心跳&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;golang通过channel发送心跳的时候，需要注意有可能没有人接收发出去的心跳（因为心跳不一定重要）&lt;/p&gt;
&lt;h2 id=&#34;复制请求&#34;&gt;复制请求&lt;/h2&gt;
&lt;p&gt;某些情况下，可以将请求分发到多个处理程序（goroutine，进程，或者服务器均可），其中一个将比其他程序更快的返回结果，这样就可以立即返回结果。但是会消耗更多的资源。当多个处理程序需要多个进程，服务器，或者数据中心时，代价会相当昂贵，所以要权衡是否值得这么做&lt;/p&gt;
&lt;h2 id=&#34;速率限制&#34;&gt;速率限制&lt;/h2&gt;
&lt;h3 id=&#34;为什么需要速率限制&#34;&gt;为什么需要速率限制&lt;/h3&gt;
&lt;p&gt;通常对系统进行限速，可以避免系统被攻击，如果恶意用户在资源允许的情况下可以频繁访问系统，他们可以做各种事情。比如：使用日志或有效请求打满服务器磁盘，或者DDos攻击。
速率限制可以将系统的性能和稳定性平衡在可控范围内&lt;/p&gt;
&lt;h3 id=&#34;如何限速&#34;&gt;如何限速&lt;/h3&gt;
&lt;p&gt;大多数是基于令牌桶算法的，相对容易实现。golang中 golang.org/x/time/rate &lt;a class=&#34;link&#34; href=&#34;https://github.com/golang/time&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[github 地址]&lt;/a&gt; 包实现了这个功能&lt;/p&gt;
&lt;h2 id=&#34;治愈异常的goroutine&#34;&gt;治愈异常的goroutine&lt;/h2&gt;
&lt;p&gt;在一个长期运行的程序中，建立一个机制来监控你的goroutine是否处于健康状态是很有用的，当goroutine异常时，可以尽快的重启。重启的过程成为“治愈”（Healing）。&lt;/p&gt;
&lt;h3 id=&#34;如何治愈goroutine&#34;&gt;如何治愈goroutine？&lt;/h3&gt;
&lt;p&gt;使用心跳模式检查我们正在监控的goroutine是否活跃。我们需要一个管理员来监视一个管理区的goroutine，如果有goroutine变得不健康，管理员负责重启这个管理区的goroutine。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>GO语言语法基础</title>
        <link>https://kris0923.github.io/p/go%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Mon, 17 Dec 2018 00:15:23 +0800</pubDate>
        
        <guid>https://kris0923.github.io/p/go%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;h1 id=&#34;基础语法&#34;&gt;基础语法&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;i++, i&amp;ndash; 在go语言中是语句，而不像其他语言一样是表达式，所以， j = i++ 在go语言里面是不合法的,并且只支持后缀， &amp;ndash;i 是不合法的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for 是go里面唯一的循环语句    &lt;br&gt;
传统的while循环写成  &lt;br&gt;
for condition {&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数&lt;/p&gt;
&lt;p&gt;函数的类型，称为函数签名，函数的实参都是按值传递的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件结束标示&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;err = errors.New(&amp;#34;EOF&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;in := bufio.NewReader(os.stdin)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;for {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    r,_,err = in.ReadRune()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if err == io.EOF {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        break // 文本结束标记
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if err != nil {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        return fmt.Errorf(&amp;#34;read failed: $v&amp;#34;,err)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    // 处理逻辑
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;go 文本结束标记不怎么友好，为什么要放到error信息中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数组
Go 语言中的数组是一种 &lt;strong&gt;值类型&lt;/strong&gt;（不像 C/C++ 中是指向首元素的指针），所以可以通过 new() 来创建： var arr1 = new([5]int)。&lt;/p&gt;
&lt;p&gt;那么这种方式和 var arr2 [5]int 的区别是什么呢？arr1 的类型是 *[5]int，而 arr2的类型是 [5]int。&lt;/p&gt;
&lt;p&gt;这样的结果就是当把一个数组赋值给另一个时，需要在做一次数组内存的拷贝操作。例如：&lt;/p&gt;
&lt;p&gt;arr2 := *arr1
arr2[2] = 100
这样两个数组就有了不同的值，在赋值后修改 arr2 不会对 arr1 生效。&lt;/p&gt;
&lt;p&gt;==切片是引用类型，所以不能用指针指向切片==&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参数传递&lt;br&gt;
go中所有的东西都是按值传递的，每次调用函数时，传入的数据都会被复制。对于具有值接收者的方法，在调用该方法时将复制该值。因为所有的参数都是通过值传递的，这就可以解释为什么 *Cat 的方法不能被 Cat 类型的值调用了。任何一个  Cat 类型的值可能会有很多 *Cat 类型的指针指向它，如果我们尝试通过 Cat 类型的值来调用 *Cat 的方法，根本就不知道对应的是哪个指针。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;go-并发编程&#34;&gt;go 并发编程&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;1. goroutine 和通道
    
    程序启动时，只有一个 goroutine 来调用 main 函数，称为主 goroutine，新的 goroutine 通过 go 语句创建
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;，就是在普通的函数或方法前加上 go 关键字，当 main 函数返回时，所有的 goroutine 都将暴力终止。&lt;br&gt;
2. 缓冲通道
&lt;code&gt;func mirroredQuery() string{ responses := make(chan string,3) go func() {responses &amp;lt;- request(&amp;quot;asia.gopl.io&amp;quot;)}() go func() {responses &amp;lt;- request(&amp;quot;europe.gopl.io&amp;quot;)}() go func() {responses &amp;lt;- request(&amp;quot;americas.gopl.io&amp;quot;)}() return &amp;lt;-responses //return the questest response }&lt;/code&gt;
主goroutine只接收第一个返回的，或者极端情况下，两个较慢的服务器还没有返回响应，就返回了结果
3. goroutine 泄漏&lt;br&gt;
如果使用无缓冲通道，两个较慢的通道goroutine将被卡住（因为他们发送响应结果到通道没有goroutine来接收），这种情况叫goroutine泄漏。不要通过共享内存来通信，应该通过通信来共享内存&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
